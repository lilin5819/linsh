#alias du='du -sh'
#alias df='df -h'

#alias lsalias='cat ~/.bashrc.aliases'
#alias vimrclocals='vim -p ~/.vimrc*.local'
alias lslocal='cat ~/.bashrc.local'
alias vilocal='vim ~/.bashrc.local'
#alias vialias='vim ~/.bashrc.aliases'
alias tree2='tree -L 2'
alias tree3='tree -L 3'
alias gsvn='git svn'

alias rcsh="source ~/.${SHELL##*/}rc"
alias findsrc='find . -name "*.[ch]"'

alias vpnstatus="sudo systemctl status pptpd xl2tpd isc-dhcp-server"
alias vpnstart="sudo systemctl start pptpd xl2tpd isc-dhcp-server"
alias vpnrestart="sudo systemctl restart pptpd xl2tpd isc-dhcp-server"
alias sshkeygen="ssh-keygen -t rsa -C"
#export DISPLAY=192.168.56.1:0.0
#xhost +

alias gitl="git log --oneline --name-status"

export PATH="$PATH:/home/lilin/bin"


function fcd() {
    if [[ $# -lt 1 ]]; then
        file=`fzf`
    else
        file=`fzf -q "$*"`
    fi
    dir="`dirname $file`"
    [ -d $dir ] && cd $dir
}

#alias cdf='`fzf` | dirname |xargs cd'
#alias catf='`fzf` |xargs cat'

function fcat() {
    if [[ $# -lt 1 ]]; then
        file=`fzf`
    else
        file=`fzf -q "$*"`
    fi
    [ -z $file ] && return 1
    cat $file
}

function fvi() {
    if [[ $# -lt 1 ]]; then
        file=`fzf`
    else
        file=`fzf -q "$*"`
    fi
    [ -z $file ] && return 1
    vim $file
}

function fvidf() {
    [ $# -lt 1 ] && echo "Usage $0 [anotherDir]" && return 1
    nextDir=$1
    if [[ $# -lt 2 ]]; then
        file="`fzf`"
    else
        shift
        file=`fzf -q "$*"`
    fi
    [ -z $file ] && return 1
    nextFile="${nextDir}/${file}"
    vimdiff $file $nextFile 
}

function fvidff() {
    file1="`fzf`"
    file2="`fzf`"
    [ -z $file1 ] || [ -z $file2 ] && return 1
    vimdiff $file1 $file2
}

######################   bakup #######################################

function bak() {
    file=$1
    [ -z $file ] && return 1
    [ -f $file ] && sudo cp -p $file "${file}.bak"
    [ -d $file ] && sudo cp -rp $file "${file}.bak"
}

function mvbak() {
    file=$1
    [ -z $file ] && return 1
    sudo mv $file "${file}.bak"
}

function fbak() {
    if [[ $# -lt 1 ]]; then
        file="`fzf`"
    else
        file=`fzf -q "$*"`
    fi
    [ -z $file ] && return 1
    [ -f $file ] && sudo cp -p $file "${file}.bak"
    [ -d $file ] && sudo cp -rp $file "${file}.bak"
}

function bakall() {
    for f in $@
    do
        echo bakup $f
        bak $f
    done
}

function unbak() {
    file=$1
    [ -z $file ] && return 1
    cp $file "${file%.bak}"
}

function unbakf() {
    if [[ $# -lt 1 ]]; then
        file="`fzf`"
    else
        file=`fzf -q "$*"`
    fi
    [ -z $file ] && return 1
    cp $file "${file%.bak}"
}

function unbakAll() {
    for f in $@
    do
        echo bakup $f
        unbak $f
    done
}

###################### end  bakup #######################################

###################### start tar ####################################

function tarc() {
    if [[ $# -gt 1 ]]; then
        tarFile="files.tar"
    else
        tarFile="$1.tar"
    fi
    tar cvf $tarFile $@
}

function tarcj() {
    if [[ $# -gt 1 ]]; then
        tarFile="files.tar.bz2"
    else
        tarFile="$1.tar.bz2"
    fi
    tar cvjf $tarFile $@
}

function tarx() {
    [ $# -gt 1 ] && mkdir -p tmpTar
    for f in $@
    do
        if [[ $# -lt 1 ]]; then
            [ -d tmpTar ] || mkdir -p tmpTar
            tar xvf $f -C "tmpTar"
        else
            tar xvf $f
        fi
    done
}

function tarxf() {
    if [[ $# -lt 1 ]]; then
        file=`fzf`
        tar xf $file
    else
        targetDir=$2
        [ -d $targetDir ] || mkdir -p $targetDir
        tar xvf `fzf` -C $targetDir
    fi
}


function diffFromList() {
    [ $# -lt 3 ] && return 1
    list=$1
    oldDir=$2
    newDir=$3
    rm differs.txt
    for f in `cat $list`
    do
        #echo "compare : $f "
        f=${f#./}
        diff -Bbwq "$oldDir/$f" "$newDir/$f" || echo $f >> differs.txt
    done
    nlines=`wc -l differs.txt | cut -d ' ' -f 1`
    while [ -n $nlines ];
    do
        for file in `cat differs.txt`
        do
            echo "对比: $file ? y/n"
            read -t 10 watch_the_diff
            case "${watch_the_diff}" in
                n)
                    echo "退出"
                    return 1
                    ;;
                *)
                    vimdiff "$oldDir/$file" "$newDir/$file"
                    nlines = `expr $nlines - 1`
                    ;;
            esac
        done
    done
}

#function findFileByText() {
    #ag -l "$*" | grep --color "\.[ch]"
#}

#function findFileByName() {
    ##ag -g "$*" | grep --color "\.[ch]"
    #findsrc | grep --color "$1"
#}


#########################  work ################################
function einit() {
    rm -rf ecos-work/*_build
    rm -rf ecos-work/*_install
    echo "清除脏空间"
    make clean
    sudo chmod -R 777 *
}

function econfig() {
    echo "初始化"
    make tsfile=$1 prepare
    echo "配置"
    make config
}

function emake() {
    target=$1
    einit
    econfig $target && make
}

function edump() {
    echo "objdump ...."
    echo "大概三分钟"
    [ -f ./ecos-work/AP/appimg ] && mips-linux-gnu-objdump -S ./ecos-work/AP/appimg > ./Exception
}

function cscopefiles() {
    ctags -R
    find . -name "*.[ch]" > cscope.files
    cscope -Rbkq
}
